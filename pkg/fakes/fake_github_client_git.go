// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Skarlso/dependabot-bundler/pkg"
	"github.com/google/go-github/v43/github"
)

type FakeGit struct {
	CreateCommitStub        func(context.Context, string, string, *github.Commit) (*github.Commit, *github.Response, error)
	createCommitMutex       sync.RWMutex
	createCommitArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Commit
	}
	createCommitReturns struct {
		result1 *github.Commit
		result2 *github.Response
		result3 error
	}
	createCommitReturnsOnCall map[int]struct {
		result1 *github.Commit
		result2 *github.Response
		result3 error
	}
	CreateRefStub        func(context.Context, string, string, *github.Reference) (*github.Reference, *github.Response, error)
	createRefMutex       sync.RWMutex
	createRefArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Reference
	}
	createRefReturns struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	createRefReturnsOnCall map[int]struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	CreateTreeStub        func(context.Context, string, string, string, []*github.TreeEntry) (*github.Tree, *github.Response, error)
	createTreeMutex       sync.RWMutex
	createTreeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 []*github.TreeEntry
	}
	createTreeReturns struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}
	createTreeReturnsOnCall map[int]struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}
	GetRefStub        func(context.Context, string, string, string) (*github.Reference, *github.Response, error)
	getRefMutex       sync.RWMutex
	getRefArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getRefReturns struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	getRefReturnsOnCall map[int]struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	UpdateRefStub        func(context.Context, string, string, *github.Reference, bool) (*github.Reference, *github.Response, error)
	updateRefMutex       sync.RWMutex
	updateRefArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Reference
		arg5 bool
	}
	updateRefReturns struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	updateRefReturnsOnCall map[int]struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGit) CreateCommit(arg1 context.Context, arg2 string, arg3 string, arg4 *github.Commit) (*github.Commit, *github.Response, error) {
	fake.createCommitMutex.Lock()
	ret, specificReturn := fake.createCommitReturnsOnCall[len(fake.createCommitArgsForCall)]
	fake.createCommitArgsForCall = append(fake.createCommitArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Commit
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateCommitStub
	fakeReturns := fake.createCommitReturns
	fake.recordInvocation("CreateCommit", []interface{}{arg1, arg2, arg3, arg4})
	fake.createCommitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) CreateCommitCallCount() int {
	fake.createCommitMutex.RLock()
	defer fake.createCommitMutex.RUnlock()
	return len(fake.createCommitArgsForCall)
}

func (fake *FakeGit) CreateCommitCalls(stub func(context.Context, string, string, *github.Commit) (*github.Commit, *github.Response, error)) {
	fake.createCommitMutex.Lock()
	defer fake.createCommitMutex.Unlock()
	fake.CreateCommitStub = stub
}

func (fake *FakeGit) CreateCommitArgsForCall(i int) (context.Context, string, string, *github.Commit) {
	fake.createCommitMutex.RLock()
	defer fake.createCommitMutex.RUnlock()
	argsForCall := fake.createCommitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) CreateCommitReturns(result1 *github.Commit, result2 *github.Response, result3 error) {
	fake.createCommitMutex.Lock()
	defer fake.createCommitMutex.Unlock()
	fake.CreateCommitStub = nil
	fake.createCommitReturns = struct {
		result1 *github.Commit
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) CreateCommitReturnsOnCall(i int, result1 *github.Commit, result2 *github.Response, result3 error) {
	fake.createCommitMutex.Lock()
	defer fake.createCommitMutex.Unlock()
	fake.CreateCommitStub = nil
	if fake.createCommitReturnsOnCall == nil {
		fake.createCommitReturnsOnCall = make(map[int]struct {
			result1 *github.Commit
			result2 *github.Response
			result3 error
		})
	}
	fake.createCommitReturnsOnCall[i] = struct {
		result1 *github.Commit
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) CreateRef(arg1 context.Context, arg2 string, arg3 string, arg4 *github.Reference) (*github.Reference, *github.Response, error) {
	fake.createRefMutex.Lock()
	ret, specificReturn := fake.createRefReturnsOnCall[len(fake.createRefArgsForCall)]
	fake.createRefArgsForCall = append(fake.createRefArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Reference
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateRefStub
	fakeReturns := fake.createRefReturns
	fake.recordInvocation("CreateRef", []interface{}{arg1, arg2, arg3, arg4})
	fake.createRefMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) CreateRefCallCount() int {
	fake.createRefMutex.RLock()
	defer fake.createRefMutex.RUnlock()
	return len(fake.createRefArgsForCall)
}

func (fake *FakeGit) CreateRefCalls(stub func(context.Context, string, string, *github.Reference) (*github.Reference, *github.Response, error)) {
	fake.createRefMutex.Lock()
	defer fake.createRefMutex.Unlock()
	fake.CreateRefStub = stub
}

func (fake *FakeGit) CreateRefArgsForCall(i int) (context.Context, string, string, *github.Reference) {
	fake.createRefMutex.RLock()
	defer fake.createRefMutex.RUnlock()
	argsForCall := fake.createRefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) CreateRefReturns(result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.createRefMutex.Lock()
	defer fake.createRefMutex.Unlock()
	fake.CreateRefStub = nil
	fake.createRefReturns = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) CreateRefReturnsOnCall(i int, result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.createRefMutex.Lock()
	defer fake.createRefMutex.Unlock()
	fake.CreateRefStub = nil
	if fake.createRefReturnsOnCall == nil {
		fake.createRefReturnsOnCall = make(map[int]struct {
			result1 *github.Reference
			result2 *github.Response
			result3 error
		})
	}
	fake.createRefReturnsOnCall[i] = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) CreateTree(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 []*github.TreeEntry) (*github.Tree, *github.Response, error) {
	var arg5Copy []*github.TreeEntry
	if arg5 != nil {
		arg5Copy = make([]*github.TreeEntry, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.createTreeMutex.Lock()
	ret, specificReturn := fake.createTreeReturnsOnCall[len(fake.createTreeArgsForCall)]
	fake.createTreeArgsForCall = append(fake.createTreeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 []*github.TreeEntry
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.CreateTreeStub
	fakeReturns := fake.createTreeReturns
	fake.recordInvocation("CreateTree", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.createTreeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) CreateTreeCallCount() int {
	fake.createTreeMutex.RLock()
	defer fake.createTreeMutex.RUnlock()
	return len(fake.createTreeArgsForCall)
}

func (fake *FakeGit) CreateTreeCalls(stub func(context.Context, string, string, string, []*github.TreeEntry) (*github.Tree, *github.Response, error)) {
	fake.createTreeMutex.Lock()
	defer fake.createTreeMutex.Unlock()
	fake.CreateTreeStub = stub
}

func (fake *FakeGit) CreateTreeArgsForCall(i int) (context.Context, string, string, string, []*github.TreeEntry) {
	fake.createTreeMutex.RLock()
	defer fake.createTreeMutex.RUnlock()
	argsForCall := fake.createTreeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeGit) CreateTreeReturns(result1 *github.Tree, result2 *github.Response, result3 error) {
	fake.createTreeMutex.Lock()
	defer fake.createTreeMutex.Unlock()
	fake.CreateTreeStub = nil
	fake.createTreeReturns = struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) CreateTreeReturnsOnCall(i int, result1 *github.Tree, result2 *github.Response, result3 error) {
	fake.createTreeMutex.Lock()
	defer fake.createTreeMutex.Unlock()
	fake.CreateTreeStub = nil
	if fake.createTreeReturnsOnCall == nil {
		fake.createTreeReturnsOnCall = make(map[int]struct {
			result1 *github.Tree
			result2 *github.Response
			result3 error
		})
	}
	fake.createTreeReturnsOnCall[i] = struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) GetRef(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*github.Reference, *github.Response, error) {
	fake.getRefMutex.Lock()
	ret, specificReturn := fake.getRefReturnsOnCall[len(fake.getRefArgsForCall)]
	fake.getRefArgsForCall = append(fake.getRefArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetRefStub
	fakeReturns := fake.getRefReturns
	fake.recordInvocation("GetRef", []interface{}{arg1, arg2, arg3, arg4})
	fake.getRefMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) GetRefCallCount() int {
	fake.getRefMutex.RLock()
	defer fake.getRefMutex.RUnlock()
	return len(fake.getRefArgsForCall)
}

func (fake *FakeGit) GetRefCalls(stub func(context.Context, string, string, string) (*github.Reference, *github.Response, error)) {
	fake.getRefMutex.Lock()
	defer fake.getRefMutex.Unlock()
	fake.GetRefStub = stub
}

func (fake *FakeGit) GetRefArgsForCall(i int) (context.Context, string, string, string) {
	fake.getRefMutex.RLock()
	defer fake.getRefMutex.RUnlock()
	argsForCall := fake.getRefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) GetRefReturns(result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.getRefMutex.Lock()
	defer fake.getRefMutex.Unlock()
	fake.GetRefStub = nil
	fake.getRefReturns = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) GetRefReturnsOnCall(i int, result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.getRefMutex.Lock()
	defer fake.getRefMutex.Unlock()
	fake.GetRefStub = nil
	if fake.getRefReturnsOnCall == nil {
		fake.getRefReturnsOnCall = make(map[int]struct {
			result1 *github.Reference
			result2 *github.Response
			result3 error
		})
	}
	fake.getRefReturnsOnCall[i] = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) UpdateRef(arg1 context.Context, arg2 string, arg3 string, arg4 *github.Reference, arg5 bool) (*github.Reference, *github.Response, error) {
	fake.updateRefMutex.Lock()
	ret, specificReturn := fake.updateRefReturnsOnCall[len(fake.updateRefArgsForCall)]
	fake.updateRefArgsForCall = append(fake.updateRefArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.Reference
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateRefStub
	fakeReturns := fake.updateRefReturns
	fake.recordInvocation("UpdateRef", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateRefMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) UpdateRefCallCount() int {
	fake.updateRefMutex.RLock()
	defer fake.updateRefMutex.RUnlock()
	return len(fake.updateRefArgsForCall)
}

func (fake *FakeGit) UpdateRefCalls(stub func(context.Context, string, string, *github.Reference, bool) (*github.Reference, *github.Response, error)) {
	fake.updateRefMutex.Lock()
	defer fake.updateRefMutex.Unlock()
	fake.UpdateRefStub = stub
}

func (fake *FakeGit) UpdateRefArgsForCall(i int) (context.Context, string, string, *github.Reference, bool) {
	fake.updateRefMutex.RLock()
	defer fake.updateRefMutex.RUnlock()
	argsForCall := fake.updateRefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeGit) UpdateRefReturns(result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.updateRefMutex.Lock()
	defer fake.updateRefMutex.Unlock()
	fake.UpdateRefStub = nil
	fake.updateRefReturns = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) UpdateRefReturnsOnCall(i int, result1 *github.Reference, result2 *github.Response, result3 error) {
	fake.updateRefMutex.Lock()
	defer fake.updateRefMutex.Unlock()
	fake.UpdateRefStub = nil
	if fake.updateRefReturnsOnCall == nil {
		fake.updateRefReturnsOnCall = make(map[int]struct {
			result1 *github.Reference
			result2 *github.Response
			result3 error
		})
	}
	fake.updateRefReturnsOnCall[i] = struct {
		result1 *github.Reference
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCommitMutex.RLock()
	defer fake.createCommitMutex.RUnlock()
	fake.createRefMutex.RLock()
	defer fake.createRefMutex.RUnlock()
	fake.createTreeMutex.RLock()
	defer fake.createTreeMutex.RUnlock()
	fake.getRefMutex.RLock()
	defer fake.getRefMutex.RUnlock()
	fake.updateRefMutex.RLock()
	defer fake.updateRefMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.Git = new(FakeGit)
