// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Skarlso/dependabot-bundler-action/pkg"
	"github.com/google/go-github/v43/github"
)

type FakeRepositories struct {
	GetCommitStub        func(context.Context, string, string, string, *github.ListOptions) (*github.RepositoryCommit, *github.Response, error)
	getCommitMutex       sync.RWMutex
	getCommitArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 *github.ListOptions
	}
	getCommitReturns struct {
		result1 *github.RepositoryCommit
		result2 *github.Response
		result3 error
	}
	getCommitReturnsOnCall map[int]struct {
		result1 *github.RepositoryCommit
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepositories) GetCommit(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 *github.ListOptions) (*github.RepositoryCommit, *github.Response, error) {
	fake.getCommitMutex.Lock()
	ret, specificReturn := fake.getCommitReturnsOnCall[len(fake.getCommitArgsForCall)]
	fake.getCommitArgsForCall = append(fake.getCommitArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 *github.ListOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetCommitStub
	fakeReturns := fake.getCommitReturns
	fake.recordInvocation("GetCommit", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getCommitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRepositories) GetCommitCallCount() int {
	fake.getCommitMutex.RLock()
	defer fake.getCommitMutex.RUnlock()
	return len(fake.getCommitArgsForCall)
}

func (fake *FakeRepositories) GetCommitCalls(stub func(context.Context, string, string, string, *github.ListOptions) (*github.RepositoryCommit, *github.Response, error)) {
	fake.getCommitMutex.Lock()
	defer fake.getCommitMutex.Unlock()
	fake.GetCommitStub = stub
}

func (fake *FakeRepositories) GetCommitArgsForCall(i int) (context.Context, string, string, string, *github.ListOptions) {
	fake.getCommitMutex.RLock()
	defer fake.getCommitMutex.RUnlock()
	argsForCall := fake.getCommitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeRepositories) GetCommitReturns(result1 *github.RepositoryCommit, result2 *github.Response, result3 error) {
	fake.getCommitMutex.Lock()
	defer fake.getCommitMutex.Unlock()
	fake.GetCommitStub = nil
	fake.getCommitReturns = struct {
		result1 *github.RepositoryCommit
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositories) GetCommitReturnsOnCall(i int, result1 *github.RepositoryCommit, result2 *github.Response, result3 error) {
	fake.getCommitMutex.Lock()
	defer fake.getCommitMutex.Unlock()
	fake.GetCommitStub = nil
	if fake.getCommitReturnsOnCall == nil {
		fake.getCommitReturnsOnCall = make(map[int]struct {
			result1 *github.RepositoryCommit
			result2 *github.Response
			result3 error
		})
	}
	fake.getCommitReturnsOnCall[i] = struct {
		result1 *github.RepositoryCommit
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositories) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCommitMutex.RLock()
	defer fake.getCommitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepositories) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.Repositories = new(FakeRepositories)
