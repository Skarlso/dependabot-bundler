// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Skarlso/dependabot-bundler/pkg/api"
	"github.com/google/go-github/v43/github"
)

type FakePullRequests struct {
	CreateStub        func(context.Context, string, string, *github.NewPullRequest) (*github.PullRequest, *github.Response, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.NewPullRequest
	}
	createReturns struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	createReturnsOnCall map[int]struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	GetStub        func(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	getReturns struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	getReturnsOnCall map[int]struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePullRequests) Create(arg1 context.Context, arg2 string, arg3 string, arg4 *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.NewPullRequest
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequests) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakePullRequests) CreateCalls(stub func(context.Context, string, string, *github.NewPullRequest) (*github.PullRequest, *github.Response, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakePullRequests) CreateArgsForCall(i int) (context.Context, string, string, *github.NewPullRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequests) CreateReturns(result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequests) CreateReturnsOnCall(i int, result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequest
			result2 *github.Response
			result3 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequests) Get(arg1 context.Context, arg2 string, arg3 string, arg4 int) (*github.PullRequest, *github.Response, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequests) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakePullRequests) GetCalls(stub func(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakePullRequests) GetArgsForCall(i int) (context.Context, string, string, int) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequests) GetReturns(result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequests) GetReturnsOnCall(i int, result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequest
			result2 *github.Response
			result3 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequests) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePullRequests) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.PullRequests = new(FakePullRequests)
